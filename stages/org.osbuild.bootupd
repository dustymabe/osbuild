#!/usr/bin/python3
"""
Install GRUB on both BIOS and UEFI systems,
ensuring that your bootloader stays up-to-date.

Bootupd supports updating GRUB and shim for
UEFI firmware on x86_64 and aarch64,
and GRUB for BIOS firmware on x86_64.
The project is deployed in Fedora CoreOS and derivatives
"""

import os
import subprocess
import sys

import osbuild.api
from osbuild.util import ostree

SCHEMA_2 = r"""
"inputs": {
  "type": "object",
  "additionalProperties": true
},
"devices": {
  "type": "object",
  "additionalProperties": true
},
"mounts": {
  "type": "array"
},
"options": {
"additionalProperties": true,
"properties": {
  "arch": {
    "description": "Build architecture.",
    "type": "string"
  },
  "deployment": {
    "additionalProperties": false,
    "required": ["osname", "ref"],
    "properties": {
      "osname": {
        "description": "Name of the stateroot to be used in the deployment",
        "type": "string"
      },
      "ref": {
        "description": "OStree ref to create and use for deployment",
        "type": "string"
      },
      "serial": {
        "description": "The deployment serial (usually '0')",
        "type": "number",
        "default": 0
      }
    }
  },
  "static-configs": {
    "description": "Install the grub configs defined for Fedora CoreOS",
    "type": "boolean"
  },
  "bios": {
    "additionalProperties": false,
    "required": ["disk"],
    "properties": {
      "disk": {
          "description": "Disk to install GRUB for BIOS-based systems",
          "type": "string"
      }
    }
  }
}
}
"""
def chroot_run(deploy_root, bootupd_args, mount_points):

    for mnt in ['dev', 'proc',  'sys', 'run', 'var', 'tmp']:
        subprocess.run(['mount', '--rbind', f"/{mnt}", f"{deploy_root}/{mnt}"])

    subprocess.run(['chroot', deploy_root, '/usr/bin/bootupctl', 'backend', 'install', '-v', f"--src-root={deploy_root}", bootupd_args, mount_points], check=True)

    for mnt in ['dev', 'proc',  'sys', 'run', 'var', 'tmp']:
         subprocess.run(['umount', '--recursive', f"${deploy_root}/mnt"])

def main(args, options):
    dep = options["deployment"]
    osname = dep["osname"]
    ref = dep["ref"]
    serial = dep.get("serial", 0)
    arch = options["arch"]
    static_configs =  options["static-configs"]
    disk = options["bios"]["disk"]

    mount_points = args["paths"]["mounts"]
    deploy_root = ostree.deployment_path(mount_points, osname, ref, serial)

    if arch in ['x86_64', 'aarch64','ppc64le']:
        bootupd_args=''
        if disk:
           bootupd_args+=f"--device={disk} "
        if static_configs == True:
           bootupd_args+=f"--with-static-configs"
        chroot_run(deploy_root, bootupd_args, mount_points)
    return 0

if __name__ == '__main__':
    _args = osbuild.api.arguments()
    r = main(_args, _args["options"])
    sys.exit(r)
