#!/usr/bin/python3
"""
Create aleph version file for the deployment.
"""


import os
import subprocess
import sys

import osbuild.api
from osbuild.util import containers, ostree

import json

CAPABILITIES = ["CAP_MAC_ADMIN"]


SCHEMA_2 = """
"options": {
  "additionalProperties": false,
  "properties": {
    "target_imgref": {
      "description": "imageref used as the source of truth for updates",
      "type": "string",
      "pattern": "^(ostree-remote-registry|ostree-image-signed|ostree-unverified-registry):.*$",
      "examples": ["ostree-remote-registry:fedora:quay.io/fedora/fedora-coreos:stable, ostree-image-signed:quay.io/fedora/fedora-coreos:stable, ostree-unverified-registry:quay.io/fedora/fedora-coreos:stable"]
    },
     "remote": {
      "description": "optional OStree remote to use for the deployment",
      "type": "string"
    }
  }
},
"inputs": {
  "type": "object",
  "additionalProperties": false,
  "oneOf": [{
    "required": ["images"]
  }, {
    "required": ["commits"]
  }],
  "properties": {
    "images": {
      "type": "object",
      "description": "Container Image to deploy",
      "additionalProperties": true
    },
    "commits": {
      "type": "object",
      "description": "OStree commit to deploy",
      "additionalProperties": true
    }
  }
}
"""

def write_to_file(tree, filename, data):
    with open(tree + "/" + filename, "w") as f:
        json.dump(data, f, indent=4, sort_keys=True)
        f.write("\n")
    f.close()

    # create a symlink for backwards compatibility with CoreOS
    cwd = os.getcwd()
    os.chdir(tree)
    subprocess.run(["ln", "-s", filename, ".coreos-aleph-version.json"], check=True)
    os.chdir(cwd)


def aleph_commit(tree, inputs, remote):
    __, commits = ostree.parse_input_commits(inputs["commits"])
    for commit, data in commits.items():
        ref = data.get("ref", commit)

    if remote:
        ref = f"{remote}:{ref}"

    extra_args = []
    extra_args.append("--print-metadata-key=version")

    aleph_version = ostree.show(f"{tree}/ostree/repo", "ostree/1/1/0", *extra_args)
    aleph_ref = ref
    aleph_ostree_commit = commit

    aleph_version_data = {
        "osbuild-version": osbuild.__version__,
        "version": aleph_version,
        "ref": aleph_ref,
        "ostree-commit": aleph_ostree_commit
    }

    write_to_file(tree, ".aleph-version.json", aleph_version_data)

    
def aleph_container(tree, inputs, target_imgref):
    images = containers.parse_containers_input(inputs)
    for image in images.values():
        with containers.container_source(image) as (image_name, __):
            
            target_imgref_list = target_imgref.split(':')
            if target_imgref_list[0] == "ostree-remote-registry":
                target_imgref_name = ':'.join(target_imgref_list[2:])
            elif target_imgref_list[0] in ["ostree-image-signed", "ostree-unverified-registry"]:
                target_imgref_name = ':'.join(target_imgref_list[1:])

            extra_args = []
            extra_args.append(f"--repo={tree}/ostree/repo")
            extra_args.append(f"registry:{target_imgref_name}")

            container_data = ostree.cli_output("container", "image", "metadata", *extra_args)
            container_data_json = json.loads(container_data)

            extra_args.append("--config")
            container_data_config = ostree.cli_output("container", "image", "metadata", *extra_args)
            container_data_config_json = json.loads(container_data_config)

            aleph_digest = container_data_json['config']['digest']
            aleph_ref = f"docker://{target_imgref}"
            aleph_version = container_data_config_json['config']['Labels']['org.opencontainers.image.version']
            aleph_container_image = container_data_config_json['config']['Labels']

            aleph_version_data = {
                "osbuild-version": osbuild.__version__,
                "ref": aleph_ref,
                "build": aleph_version,
                "version": aleph_version,
                "container-image": {
                    "image-name": image_name,
                    "image-digest": aleph_digest,
                    "image-labels": aleph_container_image
                }
            }
            
            # the 'ostree.commit' label will be optional in the future so
            # prevent hard failing if key is not found
            aleph_ostree_commit = container_data_config_json['config']['Labels'].get('ostree.commit')
            if aleph_ostree_commit is not None:
                aleph_version_data["ostree-commit"] = aleph_ostree_commit

            write_to_file(tree, ".aleph-version.json", aleph_version_data)


def main(tree, options, inputs,):
    target_imgref = options.get("target_imgref", "")
    remote = options.get("remote", "")
    input_type = list(inputs.keys())[0]

    if input_type == "commits":
        aleph_commit(tree, inputs, remote)
    elif input_type == "images":
        aleph_container(tree, inputs, target_imgref)
    

if __name__ == '__main__':
    stage_args = osbuild.api.arguments()
    r = main(stage_args["tree"],
             stage_args["options"],
             stage_args["inputs"])
    sys.exit(r)
