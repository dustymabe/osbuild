#!/usr/bin/python3
"""
Create aleph version file for the deployment.
"""


import os
import sys

import osbuild.api
from osbuild.util import ostree

import json
from glob import glob

CAPABILITIES = ["CAP_MAC_ADMIN"]


SCHEMA_2 = """
"options": {
  "additionalProperties": false,
  "properties": {
    "coreos": {
      "description": "boolean to allow for CoreOS aleph version backwards compatibility",
      "type": "boolean"
    },
    "deployment": {
      "additionalProperties": false,
      "required": ["osname", "ref"],
      "properties": {
        "osname": {
          "description": "Name of the stateroot to be used in the deployment",
          "type": "string"
        },
        "ref": {
          "description": "OStree ref to create and use for deployment",
          "type": "string"
        },
        "serial": {
          "description": "The deployment serial (usually '0')",
          "type": "number",
          "default": 0
        }
      }
    }
  }
}
"""

def write_to_file(tree, filename, data, coreos):
    with open(tree + "/" + filename, "w") as f:
        json.dump(data, f, indent=4, sort_keys=True)
        f.write("\n")
    f.close()

    # create a symlink for backwards compatibility with CoreOS
    if coreos:
      cwd = os.getcwd()
      os.chdir(tree)
      os.symlink(filename, ".coreos-aleph-version.json")
      os.chdir(cwd)


def aleph_commit(tree, imgref, coreos):
    extra_args = []
    extra_args.append("--print-metadata-key=version")

    aleph_version = ostree.cli("show", f"--repo={tree}/ostree/repo", "ostree/1/1/0", *extra_args).stdout.rstrip().strip('\'')
    aleph_ref = imgref
    # get the commit by parsing the revision of the deployment
    aleph_ostree_commit = ostree.rev_parse(tree + "/ostree/repo", "ostree/1/1/0")

    aleph_version_data = {
        "osbuild-version": osbuild.__version__,
        "version": aleph_version,
        "ref": aleph_ref,
        "ostree-commit": aleph_ostree_commit
    }

    write_to_file(tree, ".aleph-version.json", aleph_version_data, coreos)


def aleph_container(tree, imgref, coreos):
    # extract the image name from the imgref
    imgref_list = imgref.split(':')
    if imgref_list[0] in ["ostree-remote-registry", "ostree-remote-image"]:
        img_name = ':'.join(imgref_list[2:])
    elif imgref_list[0] in ["ostree-image-signed", "ostree-unverified-registry"]:
        img_name = ':'.join(imgref_list[1:])

    img_name = img_name.lstrip('docker://')

    extra_args = []
    extra_args.append(f"--repo={tree}/ostree/repo")
    extra_args.append(f"registry:{img_name}")

    container_data = ostree.cli("container", "image", "metadata", *extra_args).stdout.rstrip()
    container_data_json = json.loads(container_data)

    extra_args.append("--config")
    container_data_config = ostree.cli("container", "image", "metadata", *extra_args).stdout.rstrip()
    container_data_config_json = json.loads(container_data_config)

    aleph_digest = container_data_json['config']['digest']
    aleph_ref = f"docker://{imgref}"
    aleph_version = container_data_config_json['config']['Labels']['org.opencontainers.image.version']
    aleph_container_image = container_data_config_json['config']['Labels']

    aleph_version_data = {
        "osbuild-version": osbuild.__version__,
        "ref": aleph_ref,
        "build": aleph_version,
        "version": aleph_version,
        "container-image": {
            "image-name": img_name,
            "image-digest": aleph_digest,
            "image-labels": aleph_container_image
        }
    }
    
    # the 'ostree.commit' label will be optional in the future so
    # prevent hard failing if key is not found
    aleph_ostree_commit = container_data_config_json['config']['Labels'].get('ostree.commit')
    if aleph_ostree_commit is not None:
        aleph_version_data["ostree-commit"] = aleph_ostree_commit

    write_to_file(tree, ".aleph-version.json", aleph_version_data, coreos)


def main(tree, options, inputs,):
    coreos = options.get("coreos", False)
    dep = options.get("deployment", None)
    origin = ""

    # if deployment is specified, use it to find the origin file.
    # otherwise, autodetect the only deployment found in the tree.
    if dep is not None:
        osname = dep.get("osname", "")
        ref = dep.get("ref", "")
        serial = dep.get("serial", 0)
        origin = ostree.deployment_path(tree, osname, ref, serial) + ".origin"
    else:
        for filename in glob(tree + '/**/*.0.origin', recursive=True):
            origin = filename
    
    with open(origin) as f: s = f.read()
    imgref = s.split("=")[1].rstrip()

    if 'docker://' in imgref:
        aleph_container(tree, imgref, coreos)
    else:
        aleph_commit(tree, imgref, coreos)
    

if __name__ == '__main__':
    stage_args = osbuild.api.arguments()
    r = main(stage_args["tree"],
             stage_args["options"],
             stage_args["inputs"])
    sys.exit(r)
