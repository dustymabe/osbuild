#!/usr/bin/python3
"""
Runs `chattr` to set file/directory attributes.
"""

import os
import subprocess
import sys
from typing import Dict
from urllib.parse import ParseResult, urlparse

import osbuild.api

SCHEMA_2 = r"""
"options": {
  "additionalProperties": false,
  "required": ["path", "immutable"],
  "properties": {
    "immutable": {
      "type": "boolean",
      "description": "Make the file/directory immutable",
      "default": true
    },
    "path": {
      "oneOf": [
        {
          "type": "string",
          "description": "The destination, if a mount",
          "pattern": "^mount:\/\/[^\/]+\/"
        },
        {
          "type": "string",
          "description": "The destination, if a tree",
          "pattern": "^tree:\/\/\/"
        }
      ]
    }
  }
},
"devices": {
  "type": "object",
  "additionalProperties": true
},
"mounts": {
  "type": "array"
}
"""


def parse_mount(url: ParseResult, args: Dict):
    name = url.netloc
    if name:
        root = args["mounts"].get(name, {}).get("path")
        if not root:
            raise ValueError(f"Unknown mount '{name}'")
    else:
        root = args["paths"]["mounts"]

    return root


def parse_location(location, args):
    url = urlparse(location)

    scheme = url.scheme
    if scheme == "tree":
        root = args["tree"]
    elif scheme == "mount":
        root = parse_mount(url, args)
    else:
        raise ValueError(f"Unsupported scheme '{scheme}'")

    assert url.path.startswith("/")

    path = os.path.relpath(url.path, "/")
    path = os.path.join(root, path)
    path = os.path.normpath(path)

    if url.path.endswith("/"):
        path = os.path.join(path, ".")

    return path


def main(args, options):
    path = options["path"]
    immutable = options["immutable"]

    dst = parse_location(path, args)
    if immutable:
        subprocess.run(["chattr", "+i", dst], check=True)
    elif not immutable:
        subprocess.run(["chattr", "-i", dst], check=True)

    return 0


if __name__ == '__main__':
    _args = osbuild.api.arguments()
    r = main(_args, _args["options"])
    sys.exit(r)
